/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ChefRole;

import Business.Enterprise.Enterprise;
import Business.JobQueue.JobRequest;
import Business.JobQueue.ScheduledEventPost;
import Business.JobQueue.TaskPost;
import Business.Organization.ChefOrganization;
import Business.Organization.Organization;
import Business.Organization.VolunteerOrganization;
import Business.Person.Person;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sumit
 */
public class ManageCookingChoresJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageCookingChoresJPanel
     */
    private final ChefOrganization chefOrg;
    private final JPanel userProcessContainer;
    private final UserAccount userAccount;
    private final Enterprise enterprise;
    private final ScheduledEventPost event;

    public ManageCookingChoresJPanel(JPanel userProcessContainer, ChefOrganization chefOrg,
            UserAccount userAccount, Enterprise enterprise, ScheduledEventPost event) {
        initComponents();
        this.chefOrg = chefOrg;
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.event = event;
        populateTable();
        lblEventName.setText(event.getScheduledEvent());
        lblEventDate.setText(new java.text.SimpleDateFormat("MM/dd/yyyy").format(event.getTaskScheduleDate()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblUser = new javax.swing.JTable();
        btnAssignTask = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblEventName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblEventDate = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        tblUser.setBackground(new java.awt.Color(255, 255, 204));
        tblUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Participant Name", "Participant Age", "Task", "Task Status", "Task Scheduled Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUser);
        if (tblUser.getColumnModel().getColumnCount() > 0) {
            tblUser.getColumnModel().getColumn(0).setResizable(false);
            tblUser.getColumnModel().getColumn(1).setResizable(false);
        }

        btnAssignTask.setBackground(new java.awt.Color(255, 255, 204));
        btnAssignTask.setText("Assign Task");
        btnAssignTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignTaskActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(255, 255, 204));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Welcome Cooking Tasks Panel");

        jLabel2.setText("Task Scheduled for Event:");

        lblEventName.setText("<<Event>>");

        jLabel3.setText("Task Scheduled On Date:");

        lblEventDate.setText("<<Simple Date>>");

        btnRefresh.setBackground(new java.awt.Color(255, 255, 204));
        btnRefresh.setText("Reload");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(lblEventName))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(lblEventDate))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnBack)
                            .addGap(166, 166, 166)
                            .addComponent(btnRefresh)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAssignTask))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblEventName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblEventDate))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAssignTask)
                    .addComponent(btnBack)
                    .addComponent(btnRefresh))
                .addContainerGap(122, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignTaskActionPerformed
        // TODO add your handling code here:
        int selected_row = tblUser.getSelectedRow();
        Person person = null;
        TaskPost task = null;
        if (selected_row >= 0) {
            try {
                person = (Person) tblUser.getValueAt(selected_row, 0);
                if (person != null) {
                    try {
                        task = (TaskPost) tblUser.getValueAt(selected_row, 2);
                        if (task != null) {
                            JOptionPane.showMessageDialog(this, "The task is already assigned to " + person.getName()
                                    + ".\nPlease select " + person.getName() + " from other rows of the table.",
                                    "Information", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                    } catch (Exception e) {
                        task = null;
                    }
                }
            } catch (Exception e) {
                person = null;
            }
        }

        if (person == null) {
            try {
                task = (TaskPost) tblUser.getValueAt(selected_row, 2);
                if (task != null) {
                    JOptionPane.showMessageDialog(this, "The task is not yet assigned to any person."
                            + "\n Please proceed without any row selection to post Tasks",
                            "Information", JOptionPane.INFORMATION_MESSAGE);
                    populateTable();
                    return;
                }
            } catch (Exception ex) {
                task = null;
            }
        }

        AssignCookingChoresJPanel assign = new AssignCookingChoresJPanel(userProcessContainer, chefOrg,
                person, userAccount, enterprise, event);
        userProcessContainer.add("AssignCookingChores", assign);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_btnAssignTaskActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
        model.setRowCount(0);
        Object row[] = new Object[5];
        for (Organization org : enterprise.getOrganizationList().getOrganizationList()) {
            if (org instanceof VolunteerOrganization) {
                for (UserAccount user : org.getUserAccountList().getUserAccountList()) {
                    for (JobRequest request : user.getJobQueue().getJobRequestList()) {
                        if (event.getTaskScheduleDate().compareTo(request.getTaskScheduleDate()) == 0) {
                            row[0] = user.getParticipant();
                            row[1] = user.getParticipant().getAge();
                            TaskPost task = (TaskPost) request;
                            row[2] = task;
                            row[3] = task.getStatus();
                            row[4] = new java.text.SimpleDateFormat("MM/dd/yyyy").format(task.getTaskScheduleDate());
                            model.addRow(row);
                        }
                    }

                    for (UserAccount ua : event.getAttendanceList()) {
                        if (ua.equals(user)) {
                            row[0] = user.getParticipant();
                            row[1] = user.getParticipant().getAge();
                            row[2] = null;
                            row[3] = null;
                            row[4] = null;
                            model.addRow(row);
                        }
                    }

                }
            }

            if (org instanceof ChefOrganization) {
                for (JobRequest request : org.getJobQueue().getJobRequestList()) {
                    if (event.getTaskScheduleDate().compareTo(request.getTaskScheduleDate()) == 0) {
                        TaskPost task = (TaskPost) request;
                        row[0] = null;
                        row[1] = null;
                        row[2] = task;
                        row[3] = task.getStatus();
                        row[4] = new java.text.SimpleDateFormat("MM/dd/yyyy").format(task.getTaskScheduleDate());
                        model.addRow(row);
                    }
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignTask;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEventDate;
    private javax.swing.JLabel lblEventName;
    private javax.swing.JTable tblUser;
    // End of variables declaration//GEN-END:variables
}
