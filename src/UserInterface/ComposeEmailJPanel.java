/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Person.Person;
import Business.UserAccount.UserAccount;
import Validator.MyEmailInputVerifier;
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.events.TitleEvent;
import com.teamdev.jxbrowser.chromium.events.TitleListener;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import wrapper.OAuth2EmailSendWrapper;

/**
 *
 * @author sumit
 */
public class ComposeEmailJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ComposeEmailJPanel
     */
    private final JPanel userProcessContainer;
    private static final OAuth2EmailSendWrapper wrapper = OAuth2EmailSendWrapper.getInstance();
    private final UserAccount userAccount;
    private final Enterprise enterprise;

    public ComposeEmailJPanel(JPanel userProcessContainer, UserAccount ua, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = ua;
        txtTo.setInputVerifier(new MyEmailInputVerifier());
        txtCC.setInputVerifier(new MyEmailInputVerifier());
        txtBCC.setInputVerifier(new MyEmailInputVerifier());
        String email = userAccount.getParticipant().getEmailID();
        txtFrom.setText(email);
        populateTable();
        String token = wrapper.getAccess_token(email);
        wrapper.setSenderMail(email);
        if (token.equalsIgnoreCase("")) {
            prepareAuthetication();
        } else {
            if (! wrapper.initializeConnection()) {
                JOptionPane.showMessageDialog(this, "Failed to initialize connection", "Warning",
                    JOptionPane.WARNING_MESSAGE);
            }
        }
        tblMailerList.setFocusable(true);
    }

    private void prepareAuthetication() {
        Browser browser = new Browser();

        BrowserView browserView = new BrowserView(browser);

        JFrame frame = new JFrame();

        frame.add(browserView, BorderLayout.CENTER);
        frame.setSize(700, 500);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        //wrapper.setSenderMail(txtFrom.getText());

        browser.addTitleListener(new TitleListener() {
            @Override
            public void onTitleChange(TitleEvent event) {
                String client_auth = event.getTitle();
                System.out.println("Title = " + client_auth);
                if (!client_auth.equalsIgnoreCase("Request for Permission")) {
                    if (!client_auth.equalsIgnoreCase("Sign in - Google Accounts")) {

                        client_auth = client_auth.substring(13, client_auth.length());
                        try {
                            wrapper.preapreAccessToken(client_auth);
                        } catch (Exception e) {

                        }
                    }
                }

            }
        });

        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                browser.getCookieStorage().deleteAll();
                browser.getCacheStorage().clearCache();
                browser.dispose();
            }
        });

        browser.loadURL(wrapper.getMailServerUrl());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        txtTo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSubject = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMailerList = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();
        btnAddCC = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtCC = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtBCC = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        btnBack.setBackground(new java.awt.Color(255, 255, 204));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSend.setBackground(new java.awt.Color(255, 255, 204));
        btnSend.setText("Send Email");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jLabel1.setText("From:");

        txtFrom.setEditable(false);
        txtFrom.setBackground(new java.awt.Color(255, 255, 204));
        txtFrom.setEnabled(false);

        txtTo.setBackground(new java.awt.Color(255, 255, 204));

        jLabel2.setText("To:");

        jLabel3.setText("Subject:");

        txtSubject.setBackground(new java.awt.Color(255, 255, 204));

        tblMailerList.setBackground(new java.awt.Color(255, 255, 204));
        tblMailerList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Role", "eMailID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMailerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblMailerListMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblMailerList);

        jLabel4.setText("Message:");

        txtMessage.setBackground(new java.awt.Color(255, 255, 204));
        txtMessage.setColumns(20);
        txtMessage.setRows(5);
        jScrollPane2.setViewportView(txtMessage);

        btnAddCC.setBackground(new java.awt.Color(255, 255, 204));
        btnAddCC.setText("Add CC");
        btnAddCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCCActionPerformed(evt);
            }
        });

        jLabel5.setText("CC:");

        txtCC.setEditable(false);
        txtCC.setBackground(new java.awt.Color(255, 255, 204));
        txtCC.setEnabled(false);

        jLabel6.setText("BCC:");

        txtBCC.setEditable(false);
        txtBCC.setBackground(new java.awt.Color(255, 255, 204));
        txtBCC.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Compose Email");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSend))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtBCC, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTo, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFrom, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                                    .addComponent(txtCC)
                                    .addComponent(txtSubject)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(btnAddCC)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddCC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtBCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(btnSend))
                .addContainerGap(49, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        wrapper.setSenderMail(txtFrom.getText());
        wrapper.setMessageContent(txtMessage.getText());
        wrapper.setSubject(txtSubject.getText().trim());
        ArrayList<String> result = new ArrayList<>();
        parseMailerList(result, txtTo.getText().trim());
        for (int x = 0; x < result.size(); x++) {
            wrapper.getDirectRecipientList().add(result.get(x));
        }
        result.clear();
        parseMailerList(result, txtCC.getText().trim());
        for (int x = 0; x < result.size(); x++) {
            wrapper.getCopyRecipientList().add(result.get(x));
        }
        result.clear();
        parseMailerList(result, txtBCC.getText().trim());
        for (int x = 0; x < result.size(); x++) {
            wrapper.getBlindCopyRecipientList().add(result.get(x));
        }
        if (wrapper.initializeConnection()) {
            wrapper.SendEmail();
            JOptionPane.showMessageDialog(this, "Message Sent successfully", "Information",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to connect and send email", "Warning",
                    JOptionPane.WARNING_MESSAGE);
        }
        txtCC.setEditable(false);
        txtCC.setEnabled(false);
        txtBCC.setEditable(false);
        txtBCC.setEnabled(false);
        wrapper.clearAllMailList();
        btnAddCC.setText("Add CC");
        txtBCC.setText("");
        txtCC.setText("");
        txtTo.setText("");
        txtSubject.setText("");
        txtMessage.setText("");
    }//GEN-LAST:event_btnSendActionPerformed

    private ArrayList<String> parseMailerList(ArrayList<String> result, String str) {
        if (str.isEmpty()) {
            return null;
        }
        if (!str.contains(";") || !str.contains(",")) {
            result.add(str);
            return result;
        }
        String[] list = str.split(";,");
        for (int x = 0; x < list.length; x++) {
            result.add(list[x]);
        }
        return result;
    }

    private void btnAddCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCCActionPerformed
        // TODO add your handling code here:
        if (btnAddCC.getText().equalsIgnoreCase("Add CC")) {
            txtCC.setEditable(true);
            txtCC.setEnabled(true);
            btnAddCC.setText("Add Bcc");
        } else if (btnAddCC.getText().equalsIgnoreCase("Add Bcc")) {
            txtBCC.setEditable(true);
            txtBCC.setEnabled(true);
        }

    }//GEN-LAST:event_btnAddCCActionPerformed

    private void tblMailerListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMailerListMouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            final JPopupMenu popupMenu = new JPopupMenu();
            JMenuItem toItem = new JMenuItem("Add to TO");
            JMenuItem ccItem = new JMenuItem("Add to CC");
            JMenuItem bccItem = new JMenuItem("Add to BCC");
            toItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    int row = tblMailerList.rowAtPoint( evt.getPoint() );
                    int column = tblMailerList.columnAtPoint( evt.getPoint() );
                    if (! tblMailerList.isRowSelected(row))
                        tblMailerList.changeSelection(row, column, false, false);
                    Person person = (Person)tblMailerList.getValueAt(row, 0);
                    String email = txtTo.getText();
                    if (email.isEmpty()) {
                        txtTo.setText(person.getEmailID());
                    } else {
                        txtTo.setText(email + ";" + person.getEmailID());
                    }
                }
            });
            ccItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    int row = tblMailerList.rowAtPoint( evt.getPoint() );
                    int column = tblMailerList.columnAtPoint( evt.getPoint() );
                    if (! tblMailerList.isRowSelected(row))
                        tblMailerList.changeSelection(row, column, false, false);
                    Person person = (Person)tblMailerList.getValueAt(row, 0);
                    String email = txtCC.getText();
                    txtCC.setEnabled(true);
                    txtCC.setEditable(true);
                    if (email.isEmpty()) {
                        txtCC.setText(person.getEmailID());
                    } else {
                        txtCC.setText(email + ";" + person.getEmailID());
                    }
                }
            });
            bccItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    int row = tblMailerList.rowAtPoint( evt.getPoint() );
                    int column = tblMailerList.columnAtPoint( evt.getPoint() );
                    if (! tblMailerList.isRowSelected(row))
                        tblMailerList.changeSelection(row, column, false, false);
                    Person person = (Person)tblMailerList.getValueAt(row, 0);
                    String email = txtBCC.getText();
                    txtBCC.setEnabled(true);
                    txtBCC.setEditable(true);
                    if (email.isEmpty()) {
                        txtBCC.setText(person.getEmailID());
                    } else {
                        txtBCC.setText(email + ";" + person.getEmailID());
                    }
                }
            });
            popupMenu.add(toItem);
            popupMenu.add(ccItem);
            popupMenu.add(bccItem);
            tblMailerList.setComponentPopupMenu(popupMenu);
        }

    }//GEN-LAST:event_tblMailerListMouseReleased

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblMailerList.getModel();
        model.setRowCount(0);

        for (Organization org : enterprise.getOrganizationList().getOrganizationList()) {
            for (UserAccount ua : org.getUserAccountList().getUserAccountList()) {
                Object[] row = new Object[3];
                row[0] = ua.getParticipant();
                row[1] = ua.getRole().toString();
                row[2] = ua.getParticipant().getEmailID();
                model.addRow(row);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCC;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblMailerList;
    private javax.swing.JTextField txtBCC;
    private javax.swing.JTextField txtCC;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextArea txtMessage;
    private javax.swing.JTextField txtSubject;
    private javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables

}
