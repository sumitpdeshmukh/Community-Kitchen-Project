/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.VolunteerRole;

import Business.Enterprise.Enterprise;
import Business.JobQueue.JobRequest;
import Business.JobQueue.ScheduledEventPost;
import Business.JobQueue.TaskPost;
import Business.Organization.ChefOrganization;
import Business.Organization.CoordinatorOrganization;
import Business.Organization.Organization;
import Business.Organization.VolunteerOrganization;
import Business.UserAccount.UserAccount;
import UserInterface.ComposeEmailJPanel;
import java.awt.CardLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sumit
 */
public class VolunteerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ChefWorkAreaJPanel
     */
    private final JPanel userProcessContainer;
    private final UserAccount userAccount;
    private final VolunteerOrganization volOrg;
    private final Enterprise enterprise;
    private int selectedEvent = -1;

    public VolunteerWorkAreaJPanel(JPanel upc, UserAccount ua, VolunteerOrganization org, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = upc;
        this.userAccount = ua;
        this.volOrg = org;
        this.enterprise = enterprise;
        populateEventTable();
        populateTaskTable();
        lblVolName.setText("Welcome " + ua.getParticipant().getName());
        DisplayImage();
    }

    private void DisplayImage() {
        try {
            BufferedImage img=ImageIO.read(new File("resources\\image1.jpg"));
            ImageIcon icon=new ImageIcon(img);
            jLabel2.setIcon(icon);   
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblEvents = new javax.swing.JTable();
        lblVolName = new javax.swing.JLabel();
        btnAssign = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTask = new javax.swing.JTable();
        btnstatus = new javax.swing.JButton();
        btnEmail = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(255, 255, 255));

        tblEvents.setBackground(new java.awt.Color(255, 255, 204));
        tblEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Event Name", "Event Date", "Event Status", "Event Menu", "I'm going"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEvents);

        lblVolName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblVolName.setText("<<WelCome >>");

        btnAssign.setBackground(new java.awt.Color(255, 255, 204));
        btnAssign.setText("Assign");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        tblTask.setBackground(new java.awt.Color(255, 255, 204));
        tblTask.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task Assigned", "Task Status", "Task Description", "Task Schedule Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblTask);

        btnstatus.setBackground(new java.awt.Color(255, 255, 204));
        btnstatus.setText("Mark as Completed");
        btnstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnstatusActionPerformed(evt);
            }
        });

        btnEmail.setBackground(new java.awt.Color(255, 255, 204));
        btnEmail.setText("Send Email");
        btnEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmailActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Volunteer:");

        jLabel2.setText("jLabel2");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(lblVolName))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnstatus)
                                .addGap(125, 125, 125)
                                .addComponent(btnEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAssign))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addGap(65, 65, 65)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblVolName)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAssign)
                            .addComponent(btnstatus)
                            .addComponent(btnEmail))
                        .addContainerGap(153, Short.MAX_VALUE))
                    .addComponent(jSeparator1)))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int row_selected = tblTask.getSelectedRow();
        if (row_selected < 0) {
            JOptionPane.showMessageDialog(this, "Please select a task to assign.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        TaskPost post = (TaskPost) tblTask.getValueAt(row_selected, 0);
        if (post.getStatus().equalsIgnoreCase("Completed")) {
            JOptionPane.showMessageDialog(this, "Task is already completed", "Warning",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (post.getReceiver() != null) {
            JOptionPane.showMessageDialog(this, "Task is already assigned to you", "Warning",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!checkIfUserAttendingEvent(post)) {
            JOptionPane.showMessageDialog(this, "You are not going to the event this task is assigned in. "
                    + "Please Select I'm going in Events table", "Warning",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        post.setReceiver(userAccount);
        post.setTaskAcceptDate(new Date());
        if (selectedEvent != -1) {
            ScheduledEventPost event = (ScheduledEventPost) tblEvents.getValueAt(selectedEvent, 0);
            post.setTaskRequestDate(event.getTaskScheduleDate());
        }
        post.setStatus("Assigned");
        populateTaskTable();
        
        userAccount.getJobQueue().getJobRequestList().add(post);            
        for (Organization org : enterprise.getOrganizationList().getOrganizationList()) {
            if (org instanceof ChefOrganization) {
                org.getJobQueue().deleteJobRequest(post);
            }
        }       
      
        JOptionPane.showMessageDialog(this, "Task is assigned to you successfully", "Information",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnstatusActionPerformed
        // TODO add your handling code here:
        int row_selected = tblTask.getSelectedRow();
        if (row_selected < 0) {
            JOptionPane.showMessageDialog(this, "Please select a task to mark as completed.", "Warning",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        TaskPost post = (TaskPost) tblTask.getValueAt(row_selected, 0);
        if (post.getReceiver() == null) {
            JOptionPane.showMessageDialog(this, "Task is not assigned to you. Please assign it first", "Warning",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (post.getStatus().equalsIgnoreCase("Completed")) {
            JOptionPane.showMessageDialog(this, "Task is already completed", "Warning",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        post.setStatus("Completed");
        populateTaskTable();
        JOptionPane.showMessageDialog(this, "Task updated successfully", "Information",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnstatusActionPerformed

    private void btnEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmailActionPerformed
        // TODO add your handling code here:
        ComposeEmailJPanel frame = new ComposeEmailJPanel(userProcessContainer, userAccount, enterprise);
        userProcessContainer.add("ComposeEmailJPanel", frame);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnEmailActionPerformed

    public void populateEventTable() {
        DefaultTableModel model = (DefaultTableModel) tblEvents.getModel();
        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationList().getOrganizationList()) {
            if (organization instanceof CoordinatorOrganization) {
                for (JobRequest request : organization.getJobQueue().getJobRequestList()) {
                    Object row[] = new Object[5];
                    ScheduledEventPost event = (ScheduledEventPost) request;
                    row[0] = event;
                    row[1] = new java.text.SimpleDateFormat("MM/dd/yyyy").format(event.getTaskScheduleDate());
                    row[2] = event.getStatus();
                    row[3] = event.getMessage();
                    row[4] = isUserAccountPresent(event);
                    model.addRow(row);
                }
                break;
            }
        }

        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                for (int row = 0; row < model.getRowCount(); row++) {
                    if (tblEvents.getSelectedRow() == row) {

                        if ((Boolean) model.getValueAt(row, 4)) {
                            selectedEvent = row;
                            ScheduledEventPost event = (ScheduledEventPost) model.getValueAt(row, 0);
                            if (!isUserAccountPresent(event)) {
                                event.addAttendingUser(userAccount);
                            }
                        } else {
                            ScheduledEventPost event = (ScheduledEventPost) model.getValueAt(row, 0);
                            if (isUserAccountPresent(event)) {
                                event.deleteAttendingUser(userAccount);
                            }
                        }
                    }
                }
            }
        });

    }

    private boolean isUserAccountPresent(ScheduledEventPost event) {
        for (UserAccount ua : event.getAttendanceList()) {
            if (ua.equals(userAccount)) {
                return true;
            }
        }
        return false;
    }

    public void populateTaskTable() {
        DefaultTableModel model = (DefaultTableModel) tblTask.getModel();
        model.setRowCount(0);
        Object row[] = new Object[4];
        for (Organization org : enterprise.getOrganizationList().getOrganizationList()) {
            if (org instanceof ChefOrganization) {
                for (JobRequest job : org.getJobQueue().getJobRequestList()) {
                    TaskPost post = (TaskPost) job;
                    row[0] = post;
                    row[1] = job.getStatus();
                    row[2] = job.getMessage();
                    row[3] = new java.text.SimpleDateFormat("MM/dd/yyyy").format(job.getTaskScheduleDate());
                    model.addRow(row);
                }
                break;
            }

            if (org instanceof VolunteerOrganization) {
                for (UserAccount user : org.getUserAccountList().getUserAccountList()) {
                    if (user.equals(userAccount)) {
                        for (JobRequest request : user.getJobQueue().getJobRequestList()) {
                            TaskPost task = (TaskPost) request;
                            row[0] = task;
                            row[1] = task.getStatus();
                            row[2] = task.getMessage();
                            row[3] = new java.text.SimpleDateFormat("MM/dd/yyyy").format(task.getTaskScheduleDate());
                            model.addRow(row);
                        }
                    }
                }
            }
        }

    }

    private boolean checkIfUserAttendingEvent(TaskPost task) {
        boolean isGoing = false;
        for (Organization organization : enterprise.getOrganizationList().getOrganizationList()) {
            if (organization instanceof CoordinatorOrganization) {
                for (JobRequest request : organization.getJobQueue().getJobRequestList()) {
                    ScheduledEventPost event = (ScheduledEventPost) request;
                    if (event.getTaskScheduleDate().compareTo(task.getTaskScheduleDate()) == 0) {
                        if (isUserAccountPresent(event)) {
                            isGoing = true;
                            break;
                        }
                    }
                }
                break;
            }
        }
        return isGoing;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnEmail;
    private javax.swing.JButton btnstatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblVolName;
    private javax.swing.JTable tblEvents;
    private javax.swing.JTable tblTask;
    // End of variables declaration//GEN-END:variables
}
